#!/usr/bin/env bash

set -Eeuo pipefail
IFS=$'\n\t'

# @describe              ghciwatch-compat
#
# @meta version          0.0.0
# @meta author           Evan Relf
# @meta require-tools    ghciwatch
# @meta combine-shorts
#
# @arg       module                             TODO
# @option    -c --command <COMMAND>             TODO
# @option    -T --test <EXPR>                   TODO
# @option    -r --run <EXPR?>                   TODO
# @option    -l --lint <COMMAND?>               TODO
# @flag         --clear                         TODO
# @option       --reload* <PATH>                TODO
# @option       --restart* <PATH>               TODO
# @option    -o --outputfile <FILE>             TODO
# @option       --poll <SECONDS?>               TODO
# @option       --color[=auto|always|never]     TODO
# @option       --colour[=auto|always|never]    TODO
# @option    -s --setup <COMMAND>               TODO
# @flag      -a --allow-eval                    TODO
# @option       --target <TARGET>               TODO
# @flag      -? --help                          Print help
# @flag      -V --version                       Print version
#
# @option       --test-message <MESSAGE>        Unsupported
# @flag      -W --warnings                      Unsupported
# @flag      -S --no-status                     Unsupported
# @flag         --reverse-errors                Unsupported
# @flag         --no-height-limit               Unsupported
# @option    -h --height <INT>                  Unsupported
# @option    -w --width <INT>                   Unsupported
# @flag      -t --topmost                       Unsupported
# @flag         --no-title                      Unsupported
# @option    -p --project <NAME>                Unsupported
# @option    -C --directory <DIR>               Unsupported
# @flag         --ignore-loaded                 Unsupported
# @option    -n --max-messages <INT>            Unsupported
# @flag         --numeric-version               Unsupported
# @flag      -v --verbose                       Unsupported
# @flag      -q --quiet                         Unsupported
#
# @option    --ghciwatch-options~ <OPTS>        TODO

eval "$(argc --argc-eval "$0" "$@")"

cli_error() {
  local message=$1
  echo "\
error: $message

USAGE: ghciwatch-compat [OPTIONS] [MODULE]

For more information, try '--help'.
" >&2
  exit 1
}

error() {
  local message=$1
  echo -e "error: $message\n" >&2
  exit 1
}

args=()

# module
if [ -v "argc_module" ]; then
  echo "TODO module"
fi

# -c --command <COMMAND>
if [ -v "argc_command" ]; then
  echo "TODO command"
else
  # cabal repl $component \
  #   --repl-options=-fdiagnostics-color=always \
  #   --repl-options=-ferror-spans \
  #   --repl-options=-fno-break-on-error \
  #   --repl-options=-fno-break-on-exception \
  #   --repl-options=-fno-code \
  #   --repl-options=-j \
  #   --repl-options=-v1 \
  echo "TODO command"
fi

# -T --test <EXPR>
if [ -v "argc_test" ]; then
  echo "TODO test"
fi

# -r --run <EXPR?>
if [ -v "argc_run" ]; then
  echo "TODO run"
fi

# -l --lint <COMMAND?>
if [ -v "argc_lint" ]; then
  echo "TODO lint"
fi

if [ -v "argc_clear" ]; then
  args+=("--clear")
fi

# --reload* <PATH>
if [ -v "argc_reload" ]; then
  echo "TODO reload"
fi

# --restart* <PATH>
if [ -v "argc_restart" ]; then
  echo "TODO restart"
fi

if [ -v "argc_outputfile" ]; then
  args+=("--error-file=$argc_outputfile")
fi

# --poll <SECONDS?>
if [ -v "argc_poll" ]; then
  echo "TODO poll"
fi

# --color[=auto|always|never]
# --colour[=auto|always|never]
if [ -v "argc_color" ] || [ -v "argc_colour" ]; then
  case "$argc_color" in
    auto)
  esac
  echo "TODO color"
fi

# -s --setup <COMMAND>
if [ -v "argc_setup" ]; then
  echo "TODO setup"
fi

if [ -v "argc_allow_eval" ]; then
  args+=("--enable-eval")
fi

if [ -v "argc_ghciwatch_options" ]; then
  for arg in "${argc_ghciwatch_options[@]}"; do
    args+=("$arg")
  done
fi

echo ghciwatch "${args[@]}"
