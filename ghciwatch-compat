#!/usr/bin/env bash

set -Eeuo pipefail
IFS=$'\n\t'

if ! command -v argc >/dev/null; then
  echo "argc: command not found" >&2
  exit 1
fi

# @describe              ghciwatch-compat
#
# @meta version          0.0.0
# @meta author           Evan Relf
# @meta require-tools    ghciwatch
# @meta combine-shorts
#
# @arg       module
# @option    -c --command <COMMAND>
# @option    -T --test <EXPR>
# @option    -r --run <EXPR?>
# @option    -l --lint <COMMAND?>
# @flag         --clear
# @option       --reload* <PATH>
# @option       --restart* <PATH>
# @option    -o --outputfile <FILE>
# @option       --poll <SECONDS?>
# @option       --color[=auto|always|never]
# @option       --colour[=auto|always|never]
# @option    -s --setup <COMMAND>
# @flag      -a --allow-eval
# @option       --target <TARGET>
# @flag      -? --help
# @flag      -V --version
#
# @option       --test-message <MESSAGE>        Unsupported
# @flag      -W --warnings                      Unsupported
# @flag      -S --no-status                     Unsupported
# @flag         --reverse-errors                Unsupported
# @flag         --no-height-limit               Unsupported
# @option    -h --height <INT>                  Unsupported
# @option    -w --width <INT>                   Unsupported
# @flag      -t --topmost                       Unsupported
# @flag         --no-title                      Unsupported
# @option    -p --project <NAME>                Unsupported
# @option    -C --directory <DIR>               Unsupported
# @flag         --ignore-loaded                 Unsupported
# @option    -n --max-messages <INT>            Unsupported
# @flag         --numeric-version               Unsupported
# @flag      -v --verbose                       Unsupported
# @flag      -q --quiet                         Unsupported
#
# @option    --ghciwatch-options~ <OPTS>        Pass all further options verbatim to `ghciwatch`

eval "$(argc --argc-eval "$0" "$@")"

error_cli() {
  local message=$1
  echo "\
error: $message

USAGE: ghciwatch-compat [OPTIONS] [MODULE]

For more information, try '--help'.
" >&2
  exit 1
}

error() {
  local message=$1
  echo -e "error: $message\n" >&2
  exit 1
}

envs=()
args=(
  "--watch" "."
  "--debounce" "100ms"
)

if [ -v "argc_command" ]; then
  if [ -v "argc_target" ]; then
    error "\`--target\` not compatible with \`--command\`"
  fi
  if [ -v "argc_module" ]; then
    error "\`MODULE\` not compatible with \`--command\`"
  fi
  args+=("--command" "'$argc_command'")
else
  repl=(
    "-ferror-spans"
    "-fno-break-on-error"
    "-fno-break-on-exception"
    "-fno-code"
    "-j"
    "-v1"
  )
  if [ -v "argc_color" ]; then
    repl+=("-fdiagnostics-color=$argc_color")
  elif [ -v "argc_colour" ]; then
    repl+=("-fdiagnostics-color=$argc_colour")
  fi
  if [ -v "argc_module" ]; then
    cmd=("ghci" "$argc_module")
    if [ -v "argc_target" ]; then
      error "\`--target\` not compatible with \`MODULE\`"
    fi
    for arg in "${repl[@]}"; do
      cmd+=("$arg")
    done
  else
    cmd=("cabal repl")
    if [ -v "argc_target" ]; then
      cmd+=("$argc_target")
    fi
    for arg in "${repl[@]}"; do
      cmd+=("--repl-options=$arg")
    done
  fi
  IFS=" " args+=("--command" "${cmd[*]}")
fi

# -T --test <EXPR>
if [ -v "argc_test" ]; then
  error "TODO test"
fi

# -r --run <EXPR?>
if [ -v "argc_run" ]; then
  error "TODO run"
fi

# -l --lint <COMMAND?>
if [ -v "argc_lint" ]; then
  error "TODO lint"
fi

if [ -v "argc_clear" ]; then
  args+=("--clear")
fi

# --reload* <PATH>
if [ -v "argc_reload" ]; then
  error "TODO reload"
fi

# --restart* <PATH>
if [ -v "argc_restart" ]; then
  error "TODO restart"
fi

if [ -v "argc_outputfile" ]; then
  args+=("--error-file" "$argc_outputfile")
fi

if [ -v "argc_poll" ]; then
  if echo "$argc_poll" | grep -qvE '^[1-9][0-9]*$'; then
    error_cli "invalid value for \`--poll <SECONDS?>\`"
  fi
  args+=("--poll" "${argc_poll}s")
fi

if [ "${argc_color:-}" = "never" ] || [ "${argc_colour:-}" = "never" ]; then
  envs+=("NO_COLOR=1")
fi

# -s --setup <COMMAND>
if [ -v "argc_setup" ]; then
  error "TODO setup"
fi

if [ -v "argc_allow_eval" ]; then
  args+=("--enable-eval")
fi

if [ -v "argc_ghciwatch_options" ]; then
  for arg in "${argc_ghciwatch_options[@]}"; do
    args+=("$arg")
  done
fi

env "${envs[@]}" ghciwatch "${args[@]}"
